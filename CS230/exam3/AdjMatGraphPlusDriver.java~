/********************************************************************
  * AdjMatGraphPlusDriver.java  
  * Driver class for AdjMatGraphPlus.java
  * KNOWN FEATURES/BUGS:
  * It handles unweighted graphs only, but it can be extended.
  * It does not handle operations involving non-existing vertices
  ********************************************************************/

public class AdjMatGraphPlusDriver {

  public AdjMatGraphPlusDriver {
    // Empty constructor
  }

/******************************************************************
    Testing program.
    ******************************************************************/
 
  public static void main (String args[]){
    System.out.println("Problems for Midterm 3");
    System.out.println("______________________");
    AdjMatGraphPlus<String> graphFromTGF = new AdjMatGraphPlus<String>("Sample-Graph.tgf");
    System.out.println(graphFromTGF);
    System.out.println("Vertex E is a sink (TRUE): " + graphFromTGF.isSink("E"));
    System.out.println("Vertex C is a sink (FALSE): " + graphFromTGF.isSink("C"));
    System.out.println("Vertex O is a sink (FALSE): " + graphFromTGF.isSink("O"));
    System.out.println("A list of all of the sinks in the graph: " + graphFromTGF.allSinks());
    System.out.println("Vertex A is a source (TRUE): " + graphFromTGF.isSource("A"));
    System.out.println("Vertex B is a source (FALSE): " + graphFromTGF.isSource("B"));
    System.out.println("A list of all of the sources in the graph: " + graphFromTGF.allSources());
    System.out.println("Vertex H is isolated (TRUE): " + graphFromTGF.isIsolated("H"));
    
    AdjMatGraphPlus<String> sampleDAG = new AdjMatGraphPlus<String>("Sample-DAG.tgf");
    System.out.println(sampleDAG);
    System.out.println("A list of all of the sources in the graph: " + sampleDAG.allSources());
    System.out.println("A list of all of the sinks in the graph: " + sampleDAG.allSinks());
    //System.out.println(sampleDAG.topologicalSort());
    System.out.println("DFS starting from vertex A: " + sampleDAG.DFS("a"));
    System.out.println("BSF starting from vertex A: "  + sampleDAG.BFS("a"));
    System.out.println("Topological sort of sampleDAG: "  + sampleDAG.topologicalSortAlt());

    AdjMatGraphPlus<String> containsCycle = new AdjMatGraphPlus<String>("Contains-Cycle.tgf");
    System.out.println("Attempt to execute topological sort on a graph containing cycles: " + containsCycle.topologicalSort());
    //System.out.println(containsCycle);
    
    System.out.println(containsCycle.containsCycle());
    System.out.println(graphFromTGF.containsCycle());
    //System.out.println(Arrays.toString(graphFromTGF.marks));
    //System.out.println(sampleDAG);
    //System.out.println(Arrays.toString(sampleDAG.marks));
  }
}