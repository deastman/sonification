
public class School {
  private String name;
  private int academicRating;
  private int researchRating;
  private int pubImpactRating;
  private int overallRating;
  private int rank;
  
  /**
   *   School Constructor
   *   @param
   */
  public School (String name int aRating int rRating int pRating) {
    this.name = name;
    academicRating = aRating;
    researchRating = rRating;
    pubImpactRating = pRating;
    overallRating = 1;
    rank = 1;
  }
  
  /**
   *    Method abstract area() 
   *    To be implemented by the inheriting class.
   *
   *    @return the area of the shape.
   */
  abstract public double area();
  
    /**
   *    Method abstract perimeter() 
   *    To be implemented by the inheriting class.
   *
   *    @return the perimeter of the shape.
   */
  abstract public double perimeter();
  
  /**
   *  Method final compareTo()
   *  Compares the invoking and the param shapes by area
   *  @param otherShape  Shape instance to be compared to the invoker
   *  @return int   0 if the two shapes have the same area, 
   *                    positive integer is the invoking shape's area is greatet
   *                    negative integer is the invoking shape's area is smaller
   */
  final public int compareTo(Shape otherShape) {
    if (this.area() == otherShape.area()) return 0;
    if (this.area() > otherShape.area()) return 1;
    return -1;
  }
  
  /**
   *  Method final toString() <br>
   *  <blockquote>Final method to Display the Class</blockquote>
   *  @return String
   */
  final public String toString() {
    DecimalFormat fmt = new DecimalFormat("0.###");
    return this.name + " of area " + fmt.format(area());
  }
  
  public static void main(String args[]) {
   System.out.println("It is a blob!");  //only used for test output
  }
} // End Abstract Shape Class